#!/usr/bin/python3
import shutil
import random
import time
import sys
import curses
import argparse

__VERSION__ = "v0.1"

# matrix.py
# A cool matrix effect for your terminal!
# Fully customizable, of course.
# by illinoisjackson: https://github.com/illinoisjackson

if sys.version_info <= (3,0):
    _PY2 = 1
else:
	_PY2 = 0

class ScreenSpace:
	def __init__(self,win):
		self.chars	= []
		self.win	= win
		self.size	= self.win.getmaxyx()
		curses.start_color()
		curses.use_default_colors()
		self.win.nodelay(1)
		for i in range(0, curses.COLORS):
			curses.init_pair(i + 1, i, -1)
	def addchar(self,x,y,char,mods):
		self.chars.append((x,y,char,mods))
	def render(self,debug=None):
		self.win.erase()
		self.size = self.win.getmaxyx()
		for ch in self.chars:
			if ch[0] >= 0:
				if ch[0] < self.size[1]-1:
					if ch[1] >= 0:
						if ch[1] < self.size[0]:
							try:
								self.win.addstr(int(ch[1]),int(ch[0]),chr(ch[2]),curses.color_pair(ch[3]))
							except:
								pass
		if debug != None:
			for dstr in range(len(debug)):
				self.win.addstr(dstr,0,debug[dstr],curses.color_pair(0))
		self.win.refresh()
		self.chars = []
	def destroy(self):
		curses.nocbreak()
		self.win.keypad(0)
		curses.echo()
		curses.endwin()

class Fade:
	def __init__(self,starttick,x,y,colors,unics,length,lifetime,speed):
		self.st		= starttick 
		self.colors	= colors
		self.lcolors= len(self.colors)
		self.unics	= unics
		self.length = length
		self.lt		= lifetime
		self.speed	= speed
		self.pos	= [x,y]
		self.time	= 0
		self.dstd	= 0
	def render(self,tick,screenspace):
		self.time += 1
		for i in range(self.length):
			self.pendingchar  = random.choice(self.unics)
			self.pendingcolor = self.colors[int((i/self.length)*self.lcolors)]
			screenspace.addchar(self.pos[0],round(self.pos[1])-i,self.pendingchar, \
					self.pendingcolor)
		self.pos[1] += self.speed
		if self.time == round(self.lt):
			self.dstd = 1
	def destroy(self):
		self = None

def main(stdscr,params):
	STARTTIME = time.time()
	PARAMS = params
	FADES	= [None for fd in range(PARAMS.fades)]
	TICK = 0
	SCSP = ScreenSpace(stdscr)
	for fade in range(PARAMS.fades):
		FADES[fade] = Fade(
						TICK,
						random.randint(0,SCSP.size[1]),
						random.randint(0,SCSP.size[0]),
						[int(j) for j in PARAMS.colors.rstrip(",").split(",")],
						range(32,128),
						random.randint(PARAMS.minlength,PARAMS.maxlength),
						random.uniform(PARAMS.minlifetime,PARAMS.maxlifetime),
						random.uniform(PARAMS.minspeed,PARAMS.maxspeed))
	try:
		while True:
			time.sleep(PARAMS.delay)
			for fade in range(PARAMS.fades):
				if FADES[fade].dstd == 1:
					FADES[fade] = Fade(
							TICK,
							random.randint(0,SCSP.size[1]),
							random.randint(0,SCSP.size[0]),
							[int(j) for j in PARAMS.colors.rstrip(",").split(",")],
							range(32,128),
							random.randint(PARAMS.minlength,PARAMS.maxlength),
							random.uniform(PARAMS.minlifetime,PARAMS.maxlifetime),
							random.uniform(PARAMS.minspeed,PARAMS.maxspeed))
			for fade in FADES:
				fade.render(TICK,SCSP)
			if SCSP.win.getch() == ord('q'):
				SCSP.destroy()
				sys.exit()
			deb = []
			if (time.time()-STARTTIME) < 2:
				deb.append("Press Q or CTRL-C to quit.")
				if _PY2:
					deb.append("NOTE: Colors do not work properly in python2.")
					deb.append("Try running in python3 to get colors working.")
			if PARAMS.debug == True:
				deb.append("matrix.py %s" % __VERSION__)
				deb.append("%s\tframes, delay %s, colors %s, fades %s" % (str(TICK),str(PARAMS.delay),PARAMS.colors,str(PARAMS.fades)))
			SCSP.render(deb)
			TICK += 1
	except KeyboardInterrupt:
		SCSP.destroy()
		sys.exit()

if __name__ == '__main__':
	agp = argparse.ArgumentParser(description="A cool matrix effect for your terminal!")
	agp.add_argument("-d", "--delay", type=float, default=0.1,
					help="set delay between frames in seconds (default 0.1)")
	agp.add_argument("-n", "--fades", type=int, default=40,
					help="set number of \"fades\" on screen (default 25)")
	agp.add_argument("-miln", "--minlength", type=int, default=4,
					help="set minimum length of fades (default 4)")
	agp.add_argument("-mxln", "--maxlength", type=int, default=20,
					help="set maximum length of fades (default 20)")
	agp.add_argument("-mis", "--minspeed", type=float, default=0.5,
					help="set minimum speed of fades (default 0.5)")
	agp.add_argument("-mxs", "--maxspeed", type=float, default=2,
					help="set maximum speed of fades (default 2)")
	agp.add_argument("-milt", "--minlifetime", type=int, default=10,
					help="set minimum lifetime of fades (default 10)")
	agp.add_argument("-mxlt", "--maxlifetime", type=int, default=30,
					help="set maximum lifetime of fades (default 30)")
	agp.add_argument("-c", "--colors", type=str, default="16,83,84,119,120",
					help="set fade colors.\n"+\
					"Must be a comma separated list of values on the terminal's color palette.\n"+\
					"(default 16,83,84,119,120)")
	agp.add_argument("-g", "--debug", action="store_true",
					help="show debug statistics in upper left corner")
	args = agp.parse_args()
	curses.wrapper(main,args)